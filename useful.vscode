//
// settings.json
//

"editor.selectionClipboard": false, // disable x11 paste with middle mouse
"clangd.arguments": [
    "--header-insertion=never",
    "--background-index",
    "--clang-tidy",
],
"git.inputValidationSubjectLength": 72,
"git.inputValidationLength": 80,


// Cmake tools config stuff
"cmake.buildDirectory": "${workspaceFolder}/build/${buildKit}/${buildType}/",
"cmake.configureArgs": [
    "-DSOME_ARG_FROM_CMAKE=ON",
],

//
// keybindings.json
//
// Place your key bindings in this file to override the defaults
[
    // General
    { "key": "ctrl+j",        "command": "editor.action.joinLines"                                        },
    { "key": "ctrl+f10",      "command": "editor.debug.action.runToCursor"                                },
    { "key": "ctrl+k ctrl+r", "command": "workbench.action.restartExtensionHost"                          },
    { "key": "alt+left",      "command": "workbench.action.navigateBack"                                  },
    { "key": "ctrl+alt+-",    "command": "-workbench.action.navigateBack"                                 },
    { "key": "alt+right",     "command": "workbench.action.navigateForward"                               },
    { "key": "ctrl+shift+-",  "command": "-workbench.action.navigateForward"                              },
    { "key": "ctrl+r",        "command": "workbench.action.gotoSymbol"                                    },
    { "key": "ctrl+shift+o",  "command": "-workbench.action.gotoSymbol"                                   },
    { "key": "ctrl+tab",      "command": "workbench.action.togglePanel"                                   },
    { "key": "ctrl+j",        "command": "-workbench.action.togglePanel"                                  },
    { "key": "ctrl+k c",      "command": "clangd.restart"                                                 },
    { "key": "ctrl+q",        "command": "editor.action.showHover",
        "when": "editorTextFocus"                                                                         },
    { "key": "ctrl+k ctrl+i", "command": "-editor.action.showHover",
        "when": "editorTextFocus"                                                                         },
    { "key": "ctrl+q",        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"                                                          },
    { "key": "ctrl+k ctrl+i", "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"                                                          },
    { "key": "ctrl+alt+s",    "command": "workbench.action.files.saveAll"                                 },
    { "key": "shift+escape",  "command": "workbench.action.closePanel"                                    },
    { "key": "escape",        "command": "workbench.action.closePanel",
        "when": "editorTextFocus && panelVisible"                                                         },

    { "key": "ctrl+b",        "command": "workbench.action.tasks.build"                                   },
    { "key": "ctrl+shift+b",  "command": "-workbench.action.tasks.build"                                  },

    { "key": "ctrl+k ctrl+b", "command": "workbench.action.toggleSidebarVisibility"                       },

    // Platform specific (depends on keyboard layout etc, because minus/plus keys are a pain apparently)
    { "key": "ctrl+[Minus]",  "command": "editor.action.fontZoomIn"                                       },
    { "key": "ctrl+-",        "command": "editor.action.fontZoomOut"                                      },
    { "key": "ctrl+0",        "command": "editor.action.fontZoomReset"                                    },

    // Extension specific
    { "key": "ctrl+f5",       "command": "-cmake.debugTarget",
        "when": "cmake:enableFullFeatureSet && inCMakeProject && !cmake:hideDebugCommand && !inDebugMode" },
    { "key": "shift+f5",      "command": "-cmake.launchTarget",
        "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"                   },
    { "key": "shift+f5",      "command": "cmake.selectLaunchTarget"                                       },
    { "key": "shift+f7",      "command": "cmake.setDefaultTarget"                                         },
    { "key": "shift+f7",      "command": "-cmake.buildWithTarget",
        "when": "cmake:enableFullFeatureSet"                                                              },
    { "key": "ctrl+f7",       "command": "cmake.buildWithTarget"                                          },
    { "key": "f7",            "command": "workbench.action.tasks.build",
        "when": "!cmake:enableFullFeatureSet"                                                             },
    { "key": "ctrl+b",        "command": "cmake.build",
        "when": "cmake:enableFullFeatureSet && !cmake:hideBuildCommand"                                   },
]


//
// tasks.json
//
// simplest build task to run build.bat and run the msCompile matcher
// on the result, so when you are compiling C or C++, you can use 
// F8 to jump to the build errors
{
	"version": "2.0.0",
	"tasks": [
		{
			"type": "shell",
			"label": "build",
			"command": "${workspaceFolder}/build.bat",
			"problemMatcher": [ "$msCompile" ],
			"group": {
				"kind": "build",
				"isDefault": true
			}
		}
	]
}


//
// launch.json
//

// C++ debugging examples
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "launch debug",
            "request": "launch",

            // For code lldb extension
            "type": "lldb",
            "env": {
                "LSAN_OPTIONS": "log_threads=1:fast_unwind_on_malloc=0",
                "LSAN_OPTIONS": "log_threads=1:verbosity=1",
            },

            // For default c++ extension
            "type": "cppdbg",
            "stopAtEntry": false,
            "environment": [
                { "name": "LSAN_OPTIONS", "value": "log_threads=1:fast_unwind_on_malloc=0" },
                { "name": "LSAN_OPTIONS", "value": "log_threads=1:verbosity=1", },
            ],

            // These are useful when using cmake tools for debugging
            "program": "${command:cmake.launchTargetPath}",
            "cwd": "${command:cmake.launchTargetDirectory}",

            // Provide args
            "args": [
                "--some_arg", "1",
                // "--some_other_arg_that_is_commented_out",
            ]
        }
    ]
}
