//
// settings.json
//

// linux keyboard stuffs to work better
"editor.selectionClipboard": false, // disable x11 paste with middle mouse
"keyboard.dispatch": "keyCode", // !!! only needed if you have some dconf stuff, so mostly not

// Cmake tools config stuff
"cmake.buildDirectory": "${workspaceFolder}/build/${cmake.buildKit}/${cmake.buildType}/",
"cmake.configureArgs": [
    "-DSOME_ARG_FROM_CMAKE=ON",
],

// Vim plugin config
"vim.leader": "<space>",
"vim.easymotion": true,
"vim.easymotionMarkerForegroundColorOneChar": "#ffff00",
"vim.easymotionMarkerForegroundColorTwoChar": "#ff0000",

// Ctrl+b is used by vim so useful to override this if using vim extension
{ "key": "ctrl+h", "command": "workbench.action.toggleSidebarVisibility" },

// Nice green comment color from default theme to replace not as visible gray from most other themes
"editor.tokenColorCustomizations": {
    "comments": "#6A9955"
}

// more visible cursor
"editor.cursorWidth": 3,
"workbench.colorCustomizations": {
    "editorCursor.foreground": "#ffff00",
},


//
// keybindings.json
//
[
    // General
    { "key": "ctrl+j",        "command": "editor.action.joinLines"                                        },
    { "key": "ctrl+f10",      "command": "editor.debug.action.runToCursor"                                },
    { "key": "ctrl+k ctrl+r", "command": "workbench.action.restartExtensionHost"                          },
    { "key": "alt+left",      "command": "workbench.action.navigateBack"                                  },
    { "key": "ctrl+alt+-",    "command": "-workbench.action.navigateBack"                                 },
    { "key": "alt+right",     "command": "workbench.action.navigateForward"                               },
    { "key": "ctrl+shift+-",  "command": "-workbench.action.navigateForward"                              },
    { "key": "ctrl+r",        "command": "workbench.action.gotoSymbol"                                    },
    { "key": "ctrl+shift+o",  "command": "-workbench.action.gotoSymbol"                                   },
    { "key": "ctrl+tab",      "command": "workbench.action.togglePanel"                                   },
    { "key": "ctrl+j",        "command": "-workbench.action.togglePanel"                                  },
    { "key": "ctrl+k c",      "command": "clangd.restart"                                                 },
    { "key": "ctrl+q",        "command": "editor.action.showHover",
        "when": "editorTextFocus"                                                                         },
    { "key": "ctrl+k ctrl+i", "command": "-editor.action.showHover",
        "when": "editorTextFocus"                                                                         },
    { "key": "ctrl+q",        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"                                                          },
    { "key": "ctrl+k ctrl+i", "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"                                                          },
    { "key": "ctrl+alt+s",    "command": "workbench.action.files.saveAll"                                 },


    // Platform specific (depends on keyboard layout etc, because minus/plus keys are a pain apparently)
    { "key": "ctrl+[Minus]",  "command": "editor.action.fontZoomIn"                                       },
    { "key": "ctrl+-",        "command": "editor.action.fontZoomOut"                                      },
    { "key": "ctrl+0",        "command": "editor.action.fontZoomReset"                                    },

    // Extension specific
    { "key": "ctrl+f5",       "command": "-cmake.debugTarget",
        "when": "cmake:enableFullFeatureSet && inCMakeProject && !cmake:hideDebugCommand && !inDebugMode" },
    { "key": "shift+f5",      "command": "-cmake.launchTarget",
        "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"                   },
    { "key": "shift+f5",      "command": "cmake.selectLaunchTarget"                                       },
    { "key": "shift+f7",      "command": "cmake.setDefaultTarget"                                         },
    { "key": "shift+f7",      "command": "-cmake.buildWithTarget",
        "when": "cmake:enableFullFeatureSet"                                                              },
    { "key": "ctrl+f7",       "command": "cmake.buildWithTarget"                                          },
    { "key": "f7",            "command": "workbench.action.tasks.build",
        "when": "!cmake:enableFullFeatureSet"                                                             },

]


//
// tasks.json
//
{ // windows build with .bat file
    "label": "build",
    "type": "shell",
    "command": "build",
    "windows": {
        "options": {
            "shell": {
                "executable": "cmd.exe",
                "args": [
                    "/d",
                    "/c"
                ]
            }
        }
    },
    "problemMatcher": "$msCompile",
    "group": {
        "kind": "build",
        "isDefault": true
    }
}


//
// launch.json
//

// C++ debugging examples
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "launch debug",
            "request": "launch",

            // For code lldb extension
            "type": "lldb",
            "env": {
                "LSAN_OPTIONS": "log_threads=1:fast_unwind_on_malloc=0",
                "LSAN_OPTIONS": "log_threads=1:verbosity=1",
            },

            // For default c++ extension
            "type": "cppdbg",
            "stopAtEntry": false,
            "environment": [
                { "name": "LSAN_OPTIONS", "value": "log_threads=1:fast_unwind_on_malloc=0" },
                { "name": "LSAN_OPTIONS", "value": "log_threads=1:verbosity=1", },
            ],

            // These are useful when using cmake tools for debugging
            "program": "${command:cmake.launchTargetPath}",
            "cwd": "${command:cmake.launchTargetDirectory}",

            // Provide args
            "args": [
                "--some_arg", "1",
                // "--some_other_arg_that_is_commented_out",
            ]
        }
    ]
}
